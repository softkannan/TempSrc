//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BigDays2009
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BigDays2009Entities : DbContext
    {
        public BigDays2009Entities()
            : base("name=BigDays2009Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<MachineType> MachineTypes { get; set; }
        public virtual DbSet<RentalService> RentalServices { get; set; }
        public virtual DbSet<RentalServiceState> RentalServiceStates { get; set; }
        public virtual DbSet<Resource> Resources { get; set; }
    
        public virtual int CreateCustomer(string customerName)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateCustomer", customerNameParameter);
        }
    
        public virtual int CreateLocation(string locationName)
        {
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateLocation", locationNameParameter);
        }
    
        public virtual int CreateMachine(Nullable<short> locationID, string ressourceName, Nullable<short> machineTypeID, string status, string serialNo)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(short));
    
            var ressourceNameParameter = ressourceName != null ?
                new ObjectParameter("RessourceName", ressourceName) :
                new ObjectParameter("RessourceName", typeof(string));
    
            var machineTypeIDParameter = machineTypeID.HasValue ?
                new ObjectParameter("MachineTypeID", machineTypeID) :
                new ObjectParameter("MachineTypeID", typeof(short));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateMachine", locationIDParameter, ressourceNameParameter, machineTypeIDParameter, statusParameter, serialNoParameter);
        }
    
        public virtual int CreateMachineType(string machineTypeName)
        {
            var machineTypeNameParameter = machineTypeName != null ?
                new ObjectParameter("MachineTypeName", machineTypeName) :
                new ObjectParameter("MachineTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateMachineType", machineTypeNameParameter);
        }
    
        public virtual int CreateRentalService(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> resourceID, Nullable<int> customerID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var resourceIDParameter = resourceID.HasValue ?
                new ObjectParameter("ResourceID", resourceID) :
                new ObjectParameter("ResourceID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateRentalService", startDateParameter, endDateParameter, resourceIDParameter, customerIDParameter);
        }
    
        public virtual int CreateResource(Nullable<short> locationID, string ressourceName, string sSNo, Nullable<short> machineTypeID, string status, string serialNo)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(short));
    
            var ressourceNameParameter = ressourceName != null ?
                new ObjectParameter("RessourceName", ressourceName) :
                new ObjectParameter("RessourceName", typeof(string));
    
            var sSNoParameter = sSNo != null ?
                new ObjectParameter("SSNo", sSNo) :
                new ObjectParameter("SSNo", typeof(string));
    
            var machineTypeIDParameter = machineTypeID.HasValue ?
                new ObjectParameter("MachineTypeID", machineTypeID) :
                new ObjectParameter("MachineTypeID", typeof(short));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateResource", locationIDParameter, ressourceNameParameter, sSNoParameter, machineTypeIDParameter, statusParameter, serialNoParameter);
        }
    
        public virtual int CreateWorker(Nullable<short> locationID, string ressourceName, string sSNo)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(short));
    
            var ressourceNameParameter = ressourceName != null ?
                new ObjectParameter("RessourceName", ressourceName) :
                new ObjectParameter("RessourceName", typeof(string));
    
            var sSNoParameter = sSNo != null ?
                new ObjectParameter("SSNo", sSNo) :
                new ObjectParameter("SSNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateWorker", locationIDParameter, ressourceNameParameter, sSNoParameter);
        }
    
        public virtual int DeleteCustomer(Nullable<int> customerID, string customerName)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustomer", customerIDParameter, customerNameParameter);
        }
    
        public virtual int DeleteLocation(Nullable<short> locationID, string locationName)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(short));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLocation", locationIDParameter, locationNameParameter);
        }
    
        public virtual int DeleteMachineType(Nullable<short> machineTypeID, string machineTypeName)
        {
            var machineTypeIDParameter = machineTypeID.HasValue ?
                new ObjectParameter("MachineTypeID", machineTypeID) :
                new ObjectParameter("MachineTypeID", typeof(short));
    
            var machineTypeNameParameter = machineTypeName != null ?
                new ObjectParameter("MachineTypeName", machineTypeName) :
                new ObjectParameter("MachineTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMachineType", machineTypeIDParameter, machineTypeNameParameter);
        }
    
        public virtual int DeleteRentalService(Nullable<int> rentalServiceID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> resourceID, Nullable<int> customerID)
        {
            var rentalServiceIDParameter = rentalServiceID.HasValue ?
                new ObjectParameter("RentalServiceID", rentalServiceID) :
                new ObjectParameter("RentalServiceID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var resourceIDParameter = resourceID.HasValue ?
                new ObjectParameter("ResourceID", resourceID) :
                new ObjectParameter("ResourceID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRentalService", rentalServiceIDParameter, startDateParameter, endDateParameter, resourceIDParameter, customerIDParameter);
        }
    
        public virtual int DeleteResource(Nullable<int> resourceID, Nullable<short> locationID, string resourceName, string sSNo, Nullable<short> machineTypeID, string status, string serialNo)
        {
            var resourceIDParameter = resourceID.HasValue ?
                new ObjectParameter("ResourceID", resourceID) :
                new ObjectParameter("ResourceID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(short));
    
            var resourceNameParameter = resourceName != null ?
                new ObjectParameter("ResourceName", resourceName) :
                new ObjectParameter("ResourceName", typeof(string));
    
            var sSNoParameter = sSNo != null ?
                new ObjectParameter("SSNo", sSNo) :
                new ObjectParameter("SSNo", typeof(string));
    
            var machineTypeIDParameter = machineTypeID.HasValue ?
                new ObjectParameter("MachineTypeID", machineTypeID) :
                new ObjectParameter("MachineTypeID", typeof(short));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteResource", resourceIDParameter, locationIDParameter, resourceNameParameter, sSNoParameter, machineTypeIDParameter, statusParameter, serialNoParameter);
        }
    
        public virtual ObjectResult<ReadAvailableMachines_Result> ReadAvailableMachines(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadAvailableMachines_Result>("ReadAvailableMachines", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<ReadCustomer_Result> ReadCustomer(Nullable<int> customerID, string customerName)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadCustomer_Result>("ReadCustomer", customerIDParameter, customerNameParameter);
        }
    
        public virtual ObjectResult<ReadLocation_Result> ReadLocation(Nullable<short> locationID, string locationName)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(short));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadLocation_Result>("ReadLocation", locationIDParameter, locationNameParameter);
        }
    
        public virtual ObjectResult<ReadMachineType_Result> ReadMachineType(Nullable<short> machineTypeID, string machineTypeName)
        {
            var machineTypeIDParameter = machineTypeID.HasValue ?
                new ObjectParameter("MachineTypeID", machineTypeID) :
                new ObjectParameter("MachineTypeID", typeof(short));
    
            var machineTypeNameParameter = machineTypeName != null ?
                new ObjectParameter("MachineTypeName", machineTypeName) :
                new ObjectParameter("MachineTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadMachineType_Result>("ReadMachineType", machineTypeIDParameter, machineTypeNameParameter);
        }
    
        public virtual ObjectResult<ReadRentalService_Result> ReadRentalService(Nullable<int> rentalServiceID, Nullable<System.DateTime> startDateFrom, Nullable<System.DateTime> startDateTo, Nullable<System.DateTime> endDateFrom, Nullable<System.DateTime> endDateTo, Nullable<int> resourceID, Nullable<int> customerID)
        {
            var rentalServiceIDParameter = rentalServiceID.HasValue ?
                new ObjectParameter("RentalServiceID", rentalServiceID) :
                new ObjectParameter("RentalServiceID", typeof(int));
    
            var startDateFromParameter = startDateFrom.HasValue ?
                new ObjectParameter("StartDateFrom", startDateFrom) :
                new ObjectParameter("StartDateFrom", typeof(System.DateTime));
    
            var startDateToParameter = startDateTo.HasValue ?
                new ObjectParameter("StartDateTo", startDateTo) :
                new ObjectParameter("StartDateTo", typeof(System.DateTime));
    
            var endDateFromParameter = endDateFrom.HasValue ?
                new ObjectParameter("EndDateFrom", endDateFrom) :
                new ObjectParameter("EndDateFrom", typeof(System.DateTime));
    
            var endDateToParameter = endDateTo.HasValue ?
                new ObjectParameter("EndDateTo", endDateTo) :
                new ObjectParameter("EndDateTo", typeof(System.DateTime));
    
            var resourceIDParameter = resourceID.HasValue ?
                new ObjectParameter("ResourceID", resourceID) :
                new ObjectParameter("ResourceID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadRentalService_Result>("ReadRentalService", rentalServiceIDParameter, startDateFromParameter, startDateToParameter, endDateFromParameter, endDateToParameter, resourceIDParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<ReadResource_Result> ReadResource(Nullable<int> resourceID, Nullable<short> locationID, string ressourceName, string sSNo, Nullable<short> machineTypeID, string status, string serialNo)
        {
            var resourceIDParameter = resourceID.HasValue ?
                new ObjectParameter("ResourceID", resourceID) :
                new ObjectParameter("ResourceID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(short));
    
            var ressourceNameParameter = ressourceName != null ?
                new ObjectParameter("RessourceName", ressourceName) :
                new ObjectParameter("RessourceName", typeof(string));
    
            var sSNoParameter = sSNo != null ?
                new ObjectParameter("SSNo", sSNo) :
                new ObjectParameter("SSNo", typeof(string));
    
            var machineTypeIDParameter = machineTypeID.HasValue ?
                new ObjectParameter("MachineTypeID", machineTypeID) :
                new ObjectParameter("MachineTypeID", typeof(short));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReadResource_Result>("ReadResource", resourceIDParameter, locationIDParameter, ressourceNameParameter, sSNoParameter, machineTypeIDParameter, statusParameter, serialNoParameter);
        }
    
        public virtual int UpdateCustomer(Nullable<int> customerID, string customerName)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomer", customerIDParameter, customerNameParameter);
        }
    
        public virtual int UpdateLocation(Nullable<short> locationID, string locationName)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(short));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLocation", locationIDParameter, locationNameParameter);
        }
    
        public virtual int UpdateMachineType(Nullable<short> machineTypeID, string machineTypeName)
        {
            var machineTypeIDParameter = machineTypeID.HasValue ?
                new ObjectParameter("MachineTypeID", machineTypeID) :
                new ObjectParameter("MachineTypeID", typeof(short));
    
            var machineTypeNameParameter = machineTypeName != null ?
                new ObjectParameter("MachineTypeName", machineTypeName) :
                new ObjectParameter("MachineTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMachineType", machineTypeIDParameter, machineTypeNameParameter);
        }
    
        public virtual int UpdateRentalService(Nullable<int> rentalServiceID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> resourceID, Nullable<int> customerID)
        {
            var rentalServiceIDParameter = rentalServiceID.HasValue ?
                new ObjectParameter("RentalServiceID", rentalServiceID) :
                new ObjectParameter("RentalServiceID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var resourceIDParameter = resourceID.HasValue ?
                new ObjectParameter("ResourceID", resourceID) :
                new ObjectParameter("ResourceID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRentalService", rentalServiceIDParameter, startDateParameter, endDateParameter, resourceIDParameter, customerIDParameter);
        }
    
        public virtual int UpdateResource(Nullable<int> resourceID, Nullable<short> locationID, string ressourceName, string sSNo, Nullable<short> machineTypeID, string status, string serialNo)
        {
            var resourceIDParameter = resourceID.HasValue ?
                new ObjectParameter("ResourceID", resourceID) :
                new ObjectParameter("ResourceID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(short));
    
            var ressourceNameParameter = ressourceName != null ?
                new ObjectParameter("RessourceName", ressourceName) :
                new ObjectParameter("RessourceName", typeof(string));
    
            var sSNoParameter = sSNo != null ?
                new ObjectParameter("SSNo", sSNo) :
                new ObjectParameter("SSNo", typeof(string));
    
            var machineTypeIDParameter = machineTypeID.HasValue ?
                new ObjectParameter("MachineTypeID", machineTypeID) :
                new ObjectParameter("MachineTypeID", typeof(short));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var serialNoParameter = serialNo != null ?
                new ObjectParameter("SerialNo", serialNo) :
                new ObjectParameter("SerialNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateResource", resourceIDParameter, locationIDParameter, ressourceNameParameter, sSNoParameter, machineTypeIDParameter, statusParameter, serialNoParameter);
        }
    }
}
